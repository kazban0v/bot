import telebot
from telebot import types
import sqlite3
import logging

# API_TOKEN = ''

bot = telebot.TeleBot(API_TOKEN)
# admin_id = 

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s',
                    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()])

def initialize_db():
    try:
        with sqlite3.connect('requests_new.db') as connect:
            cursor = connect.cursor()
            cursor.execute("""CREATE TABLE IF NOT EXISTS requests (
                              id INTEGER PRIMARY KEY AUTOINCREMENT,
                              user_id INTEGER,
                              description TEXT,
                              status TEXT,
                              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                              )""")
            cursor.execute("""CREATE TABLE IF NOT EXISTS users (
                              user_id INTEGER PRIMARY KEY,
                              full_name TEXT
                              )""")
            cursor.execute("""CREATE TABLE IF NOT EXISTS admin_responses (
                              id INTEGER PRIMARY KEY AUTOINCREMENT,
                              user_id INTEGER,
                              response TEXT,
                              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                              )""")
            connect.commit()
            logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

initialize_db()

# –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
def notify_admin_new_request(request_id, user_id, description):
    try:
        markup = types.InlineKeyboardMarkup()
        btn_delete = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"delete_{request_id}")
        btn_contact = types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", callback_data=f"contact_{user_id}")
        markup.row(btn_delete, btn_contact)

        bot.send_message(admin_id, f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{description}", reply_markup=markup)
    except telebot.apihelper.ApiTelegramException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_full_name(message):
    user_id = message.from_user.id
    full_name = message.text.strip()
    try:
        with sqlite3.connect('requests_new.db') as connect:
            cursor = connect.cursor()
            cursor.execute("INSERT OR REPLACE INTO users (user_id, full_name) VALUES (?, ?)", (user_id, full_name))
            connect.commit()
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{full_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è '{full_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_pending = types.KeyboardButton("üìã –ó–∞—è–≤–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
    btn_completed = types.KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")
    btn_rejected = types.KeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")
    btn_create = types.KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É")
    btn_cancel = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
    markup.add(btn_pending, btn_completed, btn_rejected, btn_create, btn_cancel)
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    try:
        with sqlite3.connect('requests_new.db') as connect:
            cursor = connect.cursor()
            cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
            user_data = cursor.fetchone()
            if user_data is None:
                msg = bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.")
                bot.register_next_step_handler(msg, save_full_name)
            else:
                bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=create_main_menu())
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /status - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫
    /pending - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    /completed - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    /rejected - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    /create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
    /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    /all_requests - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞
    """
    bot.reply_to(message, help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
@bot.message_handler(func=lambda message: message.text.startswith('–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'))
def contact_user(message):
    try:
        # –ü–∞—Ä—Å–∏–º user_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        user_id = int(message.text.split("_")[1])
        bot.send_message(user_id, f"–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

@bot.message_handler(func=lambda message: message.text == "üìã –ó–∞—è–≤–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
def view_pending_requests(message):
    user_id = message.from_user.id
    try:
        with sqlite3.connect('requests_new.db') as connect:
            cursor = connect.cursor()
            cursor.execute("SELECT id, description, status, created_at FROM requests WHERE user_id = ? AND status = 'Pending'", (user_id,))
            pending_requests = cursor.fetchall()
        if pending_requests:
            response = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:\n"
            for req in pending_requests:
                response += f"–ó–∞–ø—Ä–æ—Å #{req[0]}: {req[1]} - –°—Ç–∞—Ç—É—Å: {req[2]} (–°–æ–∑–¥–∞–Ω–æ: {req[3]})\n"
            bot.reply_to(message, response)
        else:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")
def view_completed_requests(message):
    user_id = message.from_user.id
    try:
        with sqlite3.connect('requests_new.db') as connect:
            cursor = connect.cursor()
            cursor.execute("SELECT id, description, status, created_at FROM requests WHERE user_id = ? AND status = 'Completed'", (user_id,))
            completed_requests = cursor.fetchall()
        if completed_requests:
            response = "–í–∞—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"
            for req in completed_requests:
                response += f"–ó–∞–ø—Ä–æ—Å #{req[0]}: {req[1]} - –°—Ç–∞—Ç—É—Å: {req[2]} (–°–æ–∑–¥–∞–Ω–æ: {req[3]})\n"
            bot.reply_to(message, response)
        else:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")
def view_rejected_requests(message):
    user_id = message.from_user.id
    try:
        with sqlite3.connect('requests_new.db') as connect:
            cursor = connect.cursor()
            cursor.execute("SELECT id, description, status, created_at FROM requests WHERE user_id = ? AND status = 'Rejected'", (user_id,))
            rejected_requests = cursor.fetchall()
        if rejected_requests:
            response = "–í–∞—à–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"
            for req in rejected_requests:
                                response += f"–ó–∞–ø—Ä–æ—Å #{req[0]}: {req[1]} - –°—Ç–∞—Ç—É—Å: {req[2]} (–°–æ–∑–¥–∞–Ω–æ: {req[3]})\n"
            bot.reply_to(message, response)
        else:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text == "üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É")
def create_new_request(message):
    msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.")
    bot.register_next_step_handler(msg, process_new_request)

def process_new_request(message):
    user_id = message.from_user.id
    description = message.text.strip()
    try:
        with sqlite3.connect('requests_new.db') as connect:
            cursor = connect.cursor()
            cursor.execute("INSERT INTO requests (user_id, description, status) VALUES (?, ?, 'Pending')", (user_id, description))
            request_id = cursor.lastrowid
            connect.commit()
            logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        bot.send_message(message.chat.id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
        notify_admin_new_request(request_id, user_id, description)
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
def cancel_operation(message):
    bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=create_main_menu())

@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    if call.data.startswith("delete_"):
        request_id = int(call.data.split("_")[1])
        delete_request(call.message, request_id)
    elif call.data.startswith("contact_"):
        user_id = int(call.data.split("_")[1])
        contact_user(call.message, user_id)

def delete_request(message, request_id):
    try:
        with sqlite3.connect('requests_new.db') as connect:
            cursor = connect.cursor()
            cursor.execute("DELETE FROM requests WHERE id = ?", (request_id,))
            connect.commit()
            bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=f"–ó–∞—è–≤–∫–∞ #{request_id} —É–¥–∞–ª–µ–Ω–∞.")
            logging.info(f"–ó–∞—è–≤–∫–∞ #{request_id} —É–¥–∞–ª–µ–Ω–∞.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def contact_user(message, user_id):
    try:
        with sqlite3.connect('requests_new.db') as connect:
            cursor = connect.cursor()
            cursor.execute("SELECT full_name FROM users WHERE user_id = ?", (user_id,))
            user_data = cursor.fetchone()
        if user_data:
            bot.send_message(message.chat.id, f"–°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_data[0]}.")
        else:
            bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_request_callback(call):
    request_id = int(call.data.split("_")[1])
    delete_request(call.message, request_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('contact_'))
def contact_user_callback(call):
    user_id = int(call.data.split("_")[1])
    contact_user(call.message, user_id)
if __name__ == '__main__':
    bot.polling(none_stop=True)
